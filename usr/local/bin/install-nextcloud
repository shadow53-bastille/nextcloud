#!/bin/sh

NEXTCLOUD_ROOT="/usr/local/nextcloud"
NEXTCLOUD_ARCHIVE_FILE="/tmp/nextcloud/latest.tar.bz2"
NEXTCLOUD_ARCHIVE_URL="https://download.nextcloud.com/server/releases/latest.tar.bz2"
NEXTCLOUD_CHECKSUM_FILE="${NEXTCLOUD_ARCHIVE_FILE}.sha512"
NEXTCLOUD_CHECKSUM_URL="${NEXTCLOUD_ARCHIVE_URL}.sha512"
NEXTCLOUD_INSTALL_ROOT="${NEXTCLOUD_ROOT}/root"
NEXTCLOUD_DATA_DIR="${NEXTCLOUD_ROOT}/data"
NEXTCLOUD_BACKUP_DIR="${NEXTCLOUD_ROOT}/backups"
NEXTCLOUD_DB_BACKUP_FILE="nextcloud-mysql-backup.sql"

DB_NAME="nextcloud"
DB_USER="nextcloud"
DB_PASS=""
DB_HOST=""

ADMIN_USERNAME=""
ADMIN_PASSWORD=""

PHP_USER="www"

exit_help() {
    echo "install-nextcloud: Helper script for installing and updating Nextcloud"
    echo ""
    echo "REQUIRED FLAGS:"
    echo "  -u: Username of Nextcloud admin user"
    echo "  -p: Password of Nextcloud admin user -- must not contain spaces or shell special characters"
    echo "  -H: MySQL/MariaDB database host"
    echo "  -P: MySQL/MariaDB database password -- must not contain spaces or shell special characters"
    echo ""
    echo "OPTIONAL FLAGS:"
    echo "  -d: MySQL/MariaDB database name for Nextcloud (Current: ${DB_NAME})"
    echo "  -h: Show this help message"
    echo "  -U: MySQL/MariaDB database username (Current: ${DB_USER})"
    echo "  -r: Nextcloud installation root directory (Current: ${NEXTCLOUD_ROOT})"
    exit "$1"
}

echo_err() {
    echo "$@" 1>&2
}

while getopts d:hH:p:P:r:u:U: opt; do
    case $opt in
        d) DB_NAME="${OPTARG}" ;;
        h) help ;;
        H) DB_HOST="${OPTARG}" ;;
        p) ADMIN_PASSWORD="${OPTARG}" ;;
        P) DB_PASS="${OPTARG}" ;;
        r) NEXTCLOUD_ROOT="${OPTARG}" ;;
        u) ADMIN_USERNAME="${OPTARG}" ;;
        U) DB_USER="${OPTARG}" ;;
        ?) echo_err "Unexpected flag $opt"; exit_help ;;
    esac
done
shift $((OPTIND - 1))

if [ -z "${DB_HOST}" ] || [ -z "${DB_PASS}" ]; then
    echo_err "The -H and -P flags are required!"
    exit_help 1
fi

die() {
    echo_err "$@"
    exit 1
}

press_enter_to_continue() {
    echo "Press [Enter] to continue or ^C (Ctrl-C) to abort"
    read -r
}

as_user() {
    su -m "${PHP_USER}" -c "$@"
}

occ() {
    oldwd="$(pwd)"
    cd "${NEXTCLOUD_INSTALL_ROOT}" || die "Failed to cd to Nextcloud installation root"
    as_user php ./occ "$@"
    cd "${oldwd}" || die "Failed to cd to old wording directory"
}

download() {
    # $1: source URL
    # $2: destination
    mkdir -p "$(dirname "$2")"
    fetch --quiet --retry --output="$2" "$1"
}

download_latest() {
    echo "Downloading checksum file to ${NEXTCLOUD_CHECKSUM_FILE}"
    if ! download "${NEXTCLOUD_CHECKSUM_URL}" "${NEXTCLOUD_CHECKSUM_FILE}"; then
        die "Failed to download checksum file"
    fi
    checksum="$(cut -f1 -d' ' "${NEXTCLOUD_CHECKSUM_FILE}")"

    if test ! -f "${NEXTCLOUD_ARCHIVE_FILE}" || ! sha512 -q -c "${checksum}" "${NEXTCLOUD_ARCHIVE_FILE}"; then
        echo "Downloading Nextcloud archive"
        if ! download "${NEXTCLOUD_ARCHIVE_URL}" "${NEXTCLOUD_ARCHIVE_FILE}"; then
            echo "Failed to download installation archive"
        fi
        if ! sha512 -q -c "${checksum}" "${NEXTCLOUD_ARCHIVE_FILE}"; then
            die "Could not validate archive ${NEXTCLOUD_ARCHIVE_FILE} using SHA512 checksum"
        fi
    fi
}

current_date() {
    date +"%Y%m%d-%H%M%S"
}

backup_mysql() {
    echo "Dumping database to file"
    mysqldump --single-transaction  --default-character-set=utf8mb4 \
        -h "${DB_SERVER}" -u "${DB_USER}" -p"${DB_PASS}" > "${NEXTCLOUD_INSTALL_ROOT}/${NEXTCLOUD_DB_BACKUP_FILE}"
}

backup() {
    backup_archive="${NEXTCLOUD_BACKUP_DIR}/nextcloud-backup-$(current_date).tar.xz"

    if [ "$1" = "minimal" ]; then
        as_user tar -c --auto-compress -f "${backup_archive}" --cd "${NEXTCLOUD_INSTALL_ROOT}" \
            config themes "${NEXTCLOUD_DB_BACKUP_FILE}"
    else
        as_user tar -c --auto-compress -f "${backup_archive}" --cd "${NEXTCLOUD_INSTALL_ROOT}" .
    fi

    rm "${NEXTCLOUD_INSTALL_ROOT}/${NEXTCLOUD_DB_BACKUP_FILE}"
}

restore() {
    occ maintenance:mode --on

    # TODO: calculate latest archive
    backup_archive="${NEXTCLOUD_BACKUP_DIR}/nextcloud-backup-$(current_date).tar.xz"

    as_user tar -x -f "${backup_archive}" --cd "${NEXTCLOUD_INSTALL_ROOT}" .
    
    if [ -f "${NEXTCLOUD_INSTALL_ROOT}/${NEXTCLOUD_DB_BACKUP_FILE}" ]; then
        echo "Discovered database backup. Restoring..."
        mysql -h "${DB_SERVER}" -u "${DB_USER}" -p"${DB_PASS}" -e "DROP DATABASE ${DB_NAME}"
        mysql -h "${DB_SERVER}" -u "${DB_USER}" -p"${DB_PASS}" -e "CREATE DATABASE ${DB_NAME} CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci"
        mysql -h "${DB_SERVER}" -u "${DB_USER}" -p"${DB_PASS}" "${DB_NAME}" < "${NEXTCLOUD_INSTALL_ROOT}/${NEXTCLOUD_DB_BACKUP_FILE}"
        rm "${NEXTCLOUD_INSTALL_ROOT}/${NEXTCLOUD_DB_BACKUP_FILE}"
    fi

    occ maintenance:data-fingerprint 
    occ maintenance:mode --off
}

enable_cron() {
    echo "=== Setting Up Cron ==="
    echo "A text editor is going to open. Please ensure that a line exists with these contents:"
    echo ""
    echo "    */5  *  *  *  * php -f ${NEXTCLOUD_INSTALL_ROOT}/cron.php"
    echo ""
    echo "There must not be any leading whitespace or a comment marker (#)."
    echo "There may also be other commented-out lines if you previously disabled Cron. You may"
    echo "wish to uncomment them."
    press_enter_to_continue
    crontab -u $PHP_USER -e
}

disable_cron() {
    echo "=== Disabling Cron ==="
    echo "Nextcloud's Cron must be disabled before the current process can continue."
    echo "A text editor will open. Please comment out all nextcloud-related lines with #"
    press_enter_to_continue
    crontab -u $PHP_USER -e
}

install_nextcloud_files() {
    # This process should work regardless of clean installation or upgrade
    # If upgrading, do `backup minimal` before AND `restore minimal` after
    
    # Download the latest Nextcloud archive and validate it
    download_latest

    if [ -e "${NEXTCLOUD_INSTALL_ROOT}" ]; then
        echo "=== Deleting existing Nextcloud files ==="
        echo "If you are UPGRADING (install-nextcloud upgrade), this script should have performed"
        echo "an automatic backup of your configuration. This DOES NOT INCLUDE any third party"
        echo "applications, due to the difficulty in telling the difference from a script."
        echo ""
        echo "If you are doing a CLEAN INSTALL (install-nextcloud install), NO AUTOMATIC BACKUP"
        echo "was performed."
        echo ""
        press_enter_to_continue
        rm -rf "${NEXTCLOUD_INSTALL_ROOT}"
    fi

    mkdir -p "${NEXTCLOUD_ROOT}"
    chown -R "${PHP_USER}":"${PHP_USER}" "${NEXTCLOUD_ROOT}"

    echo "Extracting new Nextcloud files..."
    if ! as_user tar -xjf "${NEXTCLOUD_ARCHIVE_FILE}" --cd "${NEXTCLOUD_ROOT}"; then
        die "Failed to extract Nextcloud files"
    fi
    echo "Extracted"

    echo "Setting permissions on installed files"
    chown -R "${PHP_USER}":"${PHP_USER}" "${NEXTCLOUD_ROOT}"
    find "${NEXTCLOUD_ROOT}" -type d -exec chmod 750 {} \;
    find "${NEXTCLOUD_ROOT}" -type f -exec chmod 640 {} \;
}

#setup_db() {
#    password_text="$(test -n "${DB_PASS}" && echo "REDACTED" || echo "UNSET")"
#    echo "=== Setting Up the Database ==="
#    echo "This script currently only supports MySQL/MariaDB. Please make sure a compatible database"
#    echo "server is set up and running with the following values:"
#    echo ""
#    echo "    Host: ${DB_HOST}"
#    echo "    User: ${DB_HOST}"
#    echo "    Pass: ${password_text}"
#    echo ""
#    echo "This script will use the above connection details to create a database named \"${DB_NAME}\""
#    press_enter_to_continue
#
#    db_cmd -e "CREATE DATABASE ${DB_NAME}"
#    setup_db_four_byte
#}

setup_db_four_byte() {
    run_commands=false
    while true; do
        if db_cmd -e "SHOW VARIABLES LIKE 'innodb_file_per_table'" | grep ON; then
            if $run_commands; then
                if ! db_cmd -e "ALTER DATABASE ${DB_NAME} CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci"; then
                    die "Failed to set database to UTF-8 4-bytes"
                fi
                if ! occ config:system:set mysql.utf8mb4 --type boolean --value="true"; then
                    die "Failed to enable UTF-8 4-bytes in Nextcloud"
                fi
                if ! occ maintenance:repair; then
                    die "Failed to repair the installation after enabling UTF-8 4-bytes"
                fi
            fi
            break
        fi

        run_commands=true
        echo "=== Enabling 4-byte (Emoji) Support ==="
        echo "Please ensure the following settings are set on the database server:"
        echo ""
        echo "    [mysqld]"
        echo "    innodb_file_per_table=1"
        echo ""
        echo "Once you continue, a database operation will be performed. You may wish to restart"
        echo "the database first to make sure the settings apply."
        press_enter_to_continue
    done

}

run_installation() {
    echo "Running Nextcloud installation"
    occ maintenance:install --database "mysql" --database-host "${DB_HOST}" --database-name "${DB_NAME}" \
        --database-user "${DB_USER}" --database-pass "${DB_PASS}" --admin-user "${ADMIN_USERNAME}" \
        --admin-pass "${ADMIN_PASSWORD}" --data-dir "${NEXTCLOUD_DATA_DIR}"
}


operation="${1}"
shift 1

if [ "$operation" = "install" ]; then
    if [ -z "${ADMIN_USERNAME}" ] || [ -z "${ADMIN_PASSWORD}" ]; then
        echo_err "Flags -u and -p are required!"
        exit_help 1
    fi

    install_nextcloud_files
    enable_cron
    run_installation
    setup_db_four_byte
elif [ "$operation" = "upgrade" ]; then
    occ maintenance:mode --on
    # In case things fail
    backup all
    # In case they succeed
    backup minimal
    # Disable Cron
    disable_cron
    # Install new files
    install_nextcloud_files
    # Restore config, etc.
    restore minimal
    # Run upgrade process
    if ! occ upgrade; then
        echo_err "Upgrade failed, attempting to restore backup..."
        restore all
        exit 1
    fi
    # Re-enabled Cron
    enable_cron
    # Run cleanup commands
    occ maintenance:mode --off
    occ db:add-missing-columns
    occ db:add-missing-indices
elif [ "$operation" = "backup" ]; then
    occ maintenance:mode --on
    backup "$@"
    occ maintenance:mode --off
elif [ "$operation" = "restore" ]; then
    occ maintenance:mode --on
    restore "$@"
    occ maintenance:mode --off
else
    die "Unknown operation: $operation"
fi
